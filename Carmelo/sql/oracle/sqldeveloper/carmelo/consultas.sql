-- https://en.wikibooks.org/wiki/Oracle_Database/SQL_Cheatsheet

-- https://geekflare.com/es/sql-cheat-sheet/

--Consultas las tablas por esquema
SELECT table_name
FROM all_tables
WHERE owner = 'SYSTEM' order by table_name;

--crear tabla para pruebas
CREATE TABLE system.ab_productos (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY, -- Columna autoincremental
    nombre VARCHAR2(100),
    unidades NUMBER,
    precio NUMBER(10,2),
    fecha_alta DATE,
    CONSTRAINT pk_ab_productos PRIMARY KEY (id)
);

--insertar 10 productos
INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('Producto 1', 5, 10.99, SYSDATE);

INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('Producto 2', 8, 15.50, SYSDATE);

INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('Producto 3', 3, 7.25, SYSDATE);

INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('Producto 4', 7, 14.99, SYSDATE);

INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('Producto 5', 6, 9.99, SYSDATE);

INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('Producto 6', 2, 5.50, SYSDATE);

INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('Producto 7', 9, 12.25, SYSDATE);

INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('Producto 8', 4, 18.75, SYSDATE);

INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('Producto 9', 7, 11.99, SYSDATE);

INSERT INTO system.ab_productos (nombre, unidades, precio, fecha_alta)
VALUES ('juan@gmail.com', 1, 6.50, SYSDATE);

select * from system.ab_productos;

--consultas
--copia de la tabla inicial
CREATE TABLE system.ab_productos_copia (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY, -- Columna autoincremental
    nombre VARCHAR2(100),
    unidades NUMBER,
    precio NUMBER(10,2),
    fecha_alta DATE,
    CONSTRAINT pk_ab_productos_copia PRIMARY KEY (id)
);

--copiar el producto3 de la tabla productos a una variable
--DECLARE v_nombre VARCHAR2(100);
DECLARE v_nombre system.ab_productos.nombre%TYPE;
begin
SELECT nombre
INTO v_nombre
FROM system.ab_productos
where id=3;
DBMS_OUTPUT.PUT_LINE(v_nombre);
end;

--copiar el producto3 de la tabla productos a productos_copia
INSERT INTO system.ab_productos_copia (nombre, unidades, precio, fecha_alta)
( --values NO hay que ponerlo
select nombre, unidades, precio, fecha_alta
from system.ab_productos
where id=3
);

select * from system.ab_productos_copia;

--actualizar el precio un 10%
UPDATE system.ab_productos_copia
SET precio=precio*1.1
where id=1;

--funciones para String
select nombre, length(nombre), lengthb(nombre),lengthc(nombre),length2(nombre),length4(nombre)
  from system.ab_productos;
  
--buscar un caracter o probar si existe - equivalente a indexOf
select nombre, instr(nombre,'P') 
from system.ab_productos;
--se cuenta desde el 1. En programación desde el 0

--modificar el tipo de dato de una columna
ALTER TABLE system.ab_productos
MODIFY(precio float);

describe system.ab_productos;

--PL/SQL

SELECT POWER(4,3) FROM DUAL;
begin
dbms_output.put_line(5**3);
end;
declare
 --v_numero number:=5;
 total number;
begin
total:=5**3;
dbms_output.put_line(total);
end;

select nombre, unidades, power(unidades,2) as total
from system.ab_productos;

--modulo es el resto de la division
begin
dbms_output.put_line(mod(5,3));
end;

DECLARE
numero number;
begin
numero:=5;
numero:=numero+2;
dbms_output.put_line('el numero es ' || numero);
end;

CREATE or replace FUNCTION total_iva(unidades in number,precio in float)
return float  is
begin
    return round(unidades*precio*1.21,2);
end;

select nombre, unidades, precio, total_iva(unidades,precio)
from system.ab_productos;

--añadir una columna a posteriori
describe system.ab_productos;
alter table system.ab_productos add observaciones varchar2(200);


describe system.ab_productos;
alter table system.ab_productos add categoria number;

update system.ab_productos 
set observaciones='este producto está agotado'
where id=2;

select * from system.ab_productos;

CREATE TABLE system.ab_categorias( 
id NUMBER GENERATED BY DEFAULT AS IDENTITY, -- Columna autoincremental
    nombre VARCHAR2(100),
    stock_minimo NUMBER,
    CONSTRAINT pk_ab_categorias PRIMARY KEY (id));
    
INSERT INTO system.ab_categorias(id,nombre,stock_minimo) 
VALUES(3,'verduras',40);

select * from system.ab_categorias;

--relacionar la tabla ab_productos con ab_categorias
ALTER TABLE system.ab_productos
ADD CONSTRAINT fk_productos_categorias
    FOREIGN KEY (categoria)
    REFERENCES system.ab_categorias(id);

INSERT INTO system.ab_productos
 (nombre, unidades, precio, fecha_alta,observaciones,categoria)
VALUES ('peras', 17, 4.49, SYSDATE,'peras de agua fresca',3);

--muestra el total con iva de los productos de la categoría frutas
--ejemplo de subconsulta
select nombre, unidades, precio, total_iva(unidades,precio)
from system.ab_productos
where categoria=ALL (select id from system.ab_categorias where nombre='frutas');

--case
SELECT nombre, unidades,
 CASE
 WHEN unidades >  10 THEN 'NO pedir unidades'
 WHEN unidades between 5 and 10 THEN 'hacer pedido' 
 ELSE 'pedido urgente' 
 END as estado, precio 
 FROM system.ab_productos;
 
 --muestra el total de unidades por categoria
 SELECT categoria, sum(unidades) as total , 
 round(avg(precio),2) as precio_medio 
 from  system.ab_productos
 group by categoria
 order by total desc;
 
--rownum
--muestra los 3 productos más caros (con subconsulta)
select * from (
select  nombre, precio 
from system.ab_productos
order by precio desc)
where rownum<=3;



 