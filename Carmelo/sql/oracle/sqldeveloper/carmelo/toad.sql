CREATE TABLE SYSTEM.b_clientes (
  id_cliente NUMBER,
  correo_electronico VARCHAR2(100),
  fecha_registro DATE,
  PRIMARY KEY (id_cliente)
);

CREATE TABLE SYSTEM.b_log (
  id_log NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  mensaje VARCHAR2(100),
  fecha_log DATE,
  PRIMARY KEY (id_log)
);

SELECT * FROM SYSTEM.b_CLIENTES;
SELECT * FROM SYSTEM.b_log;

INSERT INTO SYSTEM.B_CLIENTES (id_cliente,correo_electronico,fecha_registro) VALUES
(4,'ana@gmail.com','10/05/2023');

INSERT INTO SYSTEM.B_LOG (mensaje,fecha_log) VALUES
('primera prueba',sysdate);

CREATE OR REPLACE PROCEDURE SYSTEM.sp_insertar_cliente (
    p_id       IN SYSTEM.B_CLIENTES.id_cliente%TYPE,
    p_correo   IN SYSTEM.B_CLIENTES.correo_electronico%TYPE,
    p_fecha    IN SYSTEM.B_CLIENTES.fecha_registro%TYPE
) AS
BEGIN
    INSERT INTO SYSTEM.B_CLIENTES (id_cliente,correo_electronico,fecha_registro)
    VALUES (p_id, p_correo, p_fecha);
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Cliente insertado correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al insertar el cliente: ' || SQLERRM);
END;

execute SYSTEM.sp_insertar_cliente(5,'antonio@gmail.com','10/05/2023');


CREATE OR REPLACE TRIGGER SYSTEM.tr_log_clientes
AFTER INSERT OR UPDATE ON SYSTEM.B_CLIENTES
FOR EACH ROW
DECLARE
    v_operacion VARCHAR2(100);
BEGIN
    IF INSERTING THEN
        v_operacion := 'REGISTRO INSERTADO';
    ELSIF UPDATING THEN
        v_operacion := 'REGISTRADO ACTUALIZADO';
    END IF;
    
   INSERT INTO SYSTEM.B_LOG (mensaje,fecha_log) VALUES
    (v_operacion,sysdate);
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Registro insertado en log_clientes.');
EXCEPTION
    WHEN OTHERS THEN
       
        DBMS_OUTPUT.PUT_LINE('Error al insertar en el log: ' || SQLERRM);
END;
/


CREATE TABLE SYSTEM.B_productos (
    id NUMBER GENERATED ALWAYS AS IDENTITY,
    nombre VARCHAR2(100),
    unidades NUMBER,
    precio NUMBER(10,2),
    PRIMARY KEY (id)
);

INSERT INTO SYSTEM.B_productos (nombre,unidades,precio)
VALUES ('abrigo',25,15.95);

SELECT * FROM SYSTEM.B_productos;

CREATE OR REPLACE FUNCTION calcular_total_producto(
    p_unidades IN NUMBER,
    p_precio   IN NUMBER
) RETURN NUMBER
IS
    v_total NUMBER;
BEGIN
    v_total := p_unidades * p_precio;
    RETURN v_total;
END;

SELECT calcular_total_producto(10,7.95) FROM DUAL; 

CREATE OR REPLACE VIEW SYSTEM.view_productos AS
SELECT NOMBRE, calcular_total_producto(UNIDADES, PRECIO) as total
FROM SYSTEM.B_productos;

select * from SYSTEM.view_productos;

CREATE TABLE SYSTEM.B_pedidos (
    pedido_id NUMBER PRIMARY KEY,
    producto_id NUMBER,
    unidades_pedidas NUMBER,
    fecha_pedido DATE,
    FOREIGN KEY (producto_id) REFERENCES SYSTEM.B_productos (id)
);

BEGIN
  SAVEPOINT inicio_transaccion;
  
  -- Inserción en la tabla de pedidos
  INSERT INTO SYSTEM.B_pedidos (pedido_id, producto_id, unidades_pedidas, fecha_pedido)
  VALUES (1, 7, 5, SYSDATE);
  
  -- Actualización de las unidades en la tabla de productos
  UPDATE SYSTEM.B_productos
  SET unidades = unidades - 5
  WHERE id = 7;
  
  -- Si no hay errores, confirmar la transacción
  COMMIT;
  
  DBMS_OUTPUT.PUT_LINE('Pedido realizado y unidades actualizadas correctamente.');
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK TO inicio_transaccion;
    DBMS_OUTPUT.PUT_LINE('Error al realizar el pedido: ' || SQLERRM);
END;
/

select * from SYSTEM.B_pedidos;
select * from SYSTEM.B_productos;
